#pragma once
#include <iostream>
#include <string>
using namespace std;

template <typename T>//List также шаблонный, чтобы передавать тип класса при создании элементов Node 
class List
{
public:	
	List();//конструктор по умолчанию
	~List();//деструктор
	void push_back(T data);//метод добавления элемента в конец списка
	void pop_front(); //метод удаления первого элемента списка
	void clear(); //метод освобождения данных в динамическом списке через метод pop_front
	//методы добавлены в третьей части:
	void push_front(T data); //добавление в начало списка
	void insert(T value, int index); //вставляет элемент вместо текущего по индексу, а тот сдвигается далее
	void pop_back(); //удаление последнего элемента
	void removeAt(int index); //удаляет элемент по индексу

	int GetSize() { 
		return Size;}; //геттер Size поскольку она в private секции 
	T& operator[](const int index);//перегрузка оператора [] для получения значений элементов, ссылка для того чтобы также изменять элемент
	void printList(); //печать всего списка 


private:

	template<typename T>//шаблонный класс для организации различных типов данных
	class Node //вложенный КЛАСС элемента списка 
	{
	public:
		
		Node *pNext;//поле указатель на следущий элемент
		T data; //значение ячейки 
		
		
		Node(T data=T(), Node *pNext=nullptr)//конструктор элемента с парамером указателя по умолчанию; pNext указатель на след. ноду
		{                      //T() - если передадим класс, вызовется конструктор по умолч.класса, если примитив то знач. по умолч. примитива             
			this->data = data;
			this->pNext = pNext; //при первичном создании 1-й ноды сюда присваивается параметр по умолчнию - nullptr 
		}		
	};
	//эти переменные и элемент класса Node здесь потому что они приватные
	int Size; //переменная для хранения кол-ва элементов чтобы возвращать последний элемент
	Node<T> *head;//объект класса Node - 1-й элемент списка
};