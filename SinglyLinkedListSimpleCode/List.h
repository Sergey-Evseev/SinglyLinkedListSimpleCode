#pragma once
#include <iostream>
using namespace std;

template <typename T>//List также шаблонный, чтобы передавать тип класса при создании элементов Node 
class List
{
public:	
	List();//конструктор по умолчанию
	~List();//деструктор
	void push_back(T data);//метод добавления элемента в конец списка
	int GetSize() { 
		return Size;}; //геттер Size поскольку она в private секции 
	T& operator[](const int index);//перегрузка оператора [] для получения значений элементов, ссылка для того чтобы также изменять элемент

private:
	template<typename T>//шаблонный класс для организации различных типов данных
	class Node //вложенный КЛАСС элемента списка
	{
	public:
		
		Node *pNext;//поле указатель на следущий элемент
		T data; //значение ячейки 
		int Size; //переменная для хранения кол-ва элементов чтобы возвращать последний элемент

		Node(T data=T(), Node *pNext=nullptr)//конструктор элемента с парамером указателя по умолчанию; pNext указатель на след. ноду
		{                      //T() - если передадим класс, вызовется консруктор по умолч.класса, если примитив то знач. по уомолч. примитива             
			this->data = data;
			this->pNext = pNext; //при первичном создании 1-й ноды сюда присваивается параметр по умолчнию - nullptr 
		}
		
		Node<T> *head;//объект класса Node - 1-й элемент списка

	};

};

